{"ast":null,"code":"var _jsxFileName = \"/Users/jaqqen/_Bachelor_container/_Testing_container/test_react_flask/geomvas/src/components/MyCanvas.js\";\nimport React, { Component } from \"react\";\nexport default class MyCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasHeight: props._height,\n      canvasWidth: props._width,\n      painting: false,\n      drawing: {\n        _set: false,\n        _data: null\n      }\n    };\n    this.canvasRef = React.createRef();\n    this.clearCanvas = this.clearCanvas.bind(this);\n    this.setDrawing = this.setDrawing.bind(this);\n  }\n\n  componentDidMount() {\n    const ctx = this.canvasRef.current.getContext(\"2d\"); // #### pre setup for drawing ####\n\n    ctx.lineWidth = 6;\n    ctx.lineCap = \"round\";\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); // #### when mouse is DOWN on CANVAS ####\n\n    this.canvasRef.current.addEventListener(\"mousedown\", e => {\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    }); // #### when mouse is UP on WINDOW ####\n\n    window.addEventListener(\"mouseup\", () => {\n      this.setState({\n        painting: false\n      });\n      ctx.beginPath();\n    }); // #### when mouse is MOVING on CANVAS ####\n\n    this.canvasRef.current.addEventListener(\"mousemove\", e => {\n      this.draw(e, ctx);\n    }); // #### passing the clearCanvas-function to the parent component ####\n\n    this.props.selectClearingMethod(this.clearCanvas); //#### passing the setDrawing-function to the parent component ####\n\n    this.props.selectSetDrawingMethod(this.setDrawing);\n  }\n\n  draw(_event, context) {\n    if (!this.state.painting) return;\n    const rect = this.canvasRef.current.getBoundingClientRect();\n    context.lineTo(_event.clientX - rect.left, _event.clientY - rect.top);\n    context.stroke();\n    context.beginPath();\n    context.moveTo(_event.clientX - rect.left, _event.clientY - rect.top);\n  }\n\n  clearCanvas() {\n    const canvasContext = this.canvasRef.current.getContext(\"2d\");\n    canvasContext.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n    canvasContext.fillStyle = \"white\";\n    canvasContext.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n  }\n\n  async setDrawing(e) {\n    const canvasData = this.canvasRef.current.toDataURL(\"image/png\"); // console.log(canvasData);\n    // const canvasData = this.canvasRef.current.toBlob((blob) => {});\n\n    e.preventDefault(); // fetch(\"http://127.0.0.1:5000/canvas\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Accept\": \"text/plain\",\n    //     \"Content-Type\": \"text/plain\"\n    //   },\n    //   body: JSON.stringify(canvasData)\n    // }).then(res => {\n    //   console.log(res);\n    // });\n    // console.log(await fetch(request, { mode: \"no-cors\" }));\n    // document.getElementById(\n    //   this.props.canvasSetterButtonIdName + this.props.idNumber\n    // ).href = canvasData;\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"my-canvas\" + this.props.idNumber,\n      ref: this.canvasRef,\n      height: this.state.canvasHeight,\n      width: this.state.canvasWidth,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jaqqen/_Bachelor_container/_Testing_container/test_react_flask/geomvas/src/components/MyCanvas.js"],"names":["React","Component","MyCanvas","constructor","props","state","canvasHeight","_height","canvasWidth","_width","painting","drawing","_set","_data","canvasRef","createRef","clearCanvas","bind","setDrawing","componentDidMount","ctx","current","getContext","lineWidth","lineCap","fillStyle","fillRect","addEventListener","e","setState","draw","window","beginPath","selectClearingMethod","selectSetDrawingMethod","_event","context","rect","getBoundingClientRect","lineTo","clientX","left","clientY","top","stroke","moveTo","canvasContext","clearRect","canvasData","toDataURL","preventDefault","render","idNumber"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class MyCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasHeight: props._height,\n      canvasWidth: props._width,\n      painting: false,\n      drawing: {\n        _set: false,\n        _data: null\n      }\n    };\n    this.canvasRef = React.createRef();\n    this.clearCanvas = this.clearCanvas.bind(this);\n    this.setDrawing = this.setDrawing.bind(this);\n  }\n\n  componentDidMount() {\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    // #### pre setup for drawing ####\n    ctx.lineWidth = 6;\n    ctx.lineCap = \"round\";\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n    // #### when mouse is DOWN on CANVAS ####\n    this.canvasRef.current.addEventListener(\"mousedown\", e => {\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    });\n    // #### when mouse is UP on WINDOW ####\n    window.addEventListener(\"mouseup\", () => {\n      this.setState({\n        painting: false\n      });\n      ctx.beginPath();\n    });\n    // #### when mouse is MOVING on CANVAS ####\n    this.canvasRef.current.addEventListener(\"mousemove\", e => {\n      this.draw(e, ctx);\n    });\n\n    // #### passing the clearCanvas-function to the parent component ####\n    this.props.selectClearingMethod(this.clearCanvas);\n\n    //#### passing the setDrawing-function to the parent component ####\n    this.props.selectSetDrawingMethod(this.setDrawing);\n  }\n\n  draw(_event, context) {\n    if (!this.state.painting) return;\n    const rect = this.canvasRef.current.getBoundingClientRect();\n    context.lineTo(_event.clientX - rect.left, _event.clientY - rect.top);\n    context.stroke();\n    context.beginPath();\n    context.moveTo(_event.clientX - rect.left, _event.clientY - rect.top);\n  }\n\n  clearCanvas() {\n    const canvasContext = this.canvasRef.current.getContext(\"2d\");\n    canvasContext.clearRect(\n      0,\n      0,\n      this.state.canvasWidth,\n      this.state.canvasHeight\n    );\n    canvasContext.fillStyle = \"white\";\n    canvasContext.fillRect(\n      0,\n      0,\n      this.state.canvasWidth,\n      this.state.canvasHeight\n    );\n  }\n\n  async setDrawing(e) {\n    const canvasData = this.canvasRef.current.toDataURL(\"image/png\");\n    // console.log(canvasData);\n    // const canvasData = this.canvasRef.current.toBlob((blob) => {});\n    e.preventDefault();\n    // fetch(\"http://127.0.0.1:5000/canvas\", {\n    //   method: \"POST\",\n    //   headers: {\n    //     \"Accept\": \"text/plain\",\n    //     \"Content-Type\": \"text/plain\"\n    //   },\n    //   body: JSON.stringify(canvasData)\n    // }).then(res => {\n    //   console.log(res);\n    // });\n\n    // console.log(await fetch(request, { mode: \"no-cors\" }));\n\n    // document.getElementById(\n    //   this.props.canvasSetterButtonIdName + this.props.idNumber\n    // ).href = canvasData;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <canvas\n          id={\"my-canvas\" + this.props.idNumber}\n          ref={this.canvasRef}\n          height={this.state.canvasHeight}\n          width={this.state.canvasWidth}\n        />\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}