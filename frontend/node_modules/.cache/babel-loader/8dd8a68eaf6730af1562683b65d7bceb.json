{"ast":null,"code":"import _defineProperty from \"/Users/jaqqen/ShaVas/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/jaqqen/ShaVas/frontend/src/components/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from \"react\";\nimport \"./../static/App.css\";\nimport CanvasBlock from \"./CanvasBlock\"; // import IdentifcationCanvasBlock from \"./IdentificationBlock\";\n\nimport IdentificationCanvas from './IdentificationCanvas';\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.initState = {\n      canvasNamesWithInteraction: [],\n      identifyerCanvas: false,\n      isGenerating: false,\n      myInterval: null\n    };\n    this.state = _objectSpread({}, this.initState);\n    this.fetchIfNeuralNetwork = this.fetchIfNeuralNetwork.bind(this);\n    this.getSample = this.getSample.bind(this);\n    this.registerCanvasInteractions = this.registerCanvasInteractions.bind(this);\n    this.resetInputLogic = this.resetInputLogic.bind(this);\n    this.sendDataToBackend = this.sendDataToBackend.bind(this);\n    this.getRootStateWhenMyCanvasUnmount = this.getRootStateWhenMyCanvasUnmount.bind(this);\n    this.identifyCanvasContent = this.identifyCanvasContent.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchClearDatalist();\n    this.fetchIfNeuralNetwork();\n  } // GET - CLEAR LIST VARIABLES IN BACKEND\n\n\n  async fetchClearDatalist() {\n    await fetch('/clear_datalist').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      Object.keys(data).forEach(key => {// console.log(key + ' ' + data[key]);\n      });\n    }).catch(error => console.log('Error', error));\n  } // GET - FETCH THE NEURAL NETWORK MODEL\n\n\n  async fetchIfNeuralNetwork() {\n    await fetch('/if_neural_network').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      // console.log('OK - fetchIfNeuralNetwork', data);\n      if (data === true) {\n        this.setState({\n          identifyerCanvas: false\n        });\n      }\n    }).catch(error => console.log('Error', error));\n  } // POST - DATA TO BACKEND\n\n\n  async sendDataToBackend() {\n    const canvas0 = document.getElementById('my-canvas0').getContext('2d')['canvas'].toDataURL('image/png');\n    const canvas1 = document.getElementById('my-canvas1').getContext('2d')['canvas'].toDataURL('image/png');\n    this.setState({\n      isGenerating: true\n    });\n    const obj = {\n      'data0': canvas0,\n      'data1': canvas1\n    };\n    await fetch('/send_canvas', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong in /send_canvas...');\n      }\n    }).then(data => {\n      console.log('OK - /send_canvas \\n', data);\n      const myInterval = setInterval(() => {\n        this.getSample();\n      }, 1000);\n      this.setState({\n        myInterval: myInterval\n      });\n    }).catch(error => console.log('ERROR - Catch: /send_canvas ', error));\n  } // GET - SAMPLE OF THE DATA THAT IS BEING GENERATED\n\n\n  async getSample() {\n    await fetch('/getSample').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong in /getSample...');\n      }\n    }).then(data => {\n      if (!data.samples_created) {\n        console.log('OK - FALSE - /getSample: ', data);\n      } else {\n        console.log('OK - TRUE - /getSample: ', data);\n        this.setState({\n          identifyerCanvas: true,\n          isGenerating: false\n        });\n        clearInterval(this.state.myInterval);\n      }\n    }).catch(error => console.log('ERROR', error));\n  } // POST - IDENTIFY THE DRAWING\n\n\n  async identifyCanvasContent() {\n    const identificationCanvas = document.getElementById('my-canvas2').getContext('2d')['canvas'].toDataURL('image/png');\n    const obj = {\n      'dataI': identificationCanvas\n    };\n    await fetch('/identify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      try {\n        console.log('>> IDENTIFIED - 0-0 ', data[0][0]);\n      } catch (e) {\n        console.log('<< NOT IDENTIFED - 0');\n      }\n    }).catch(error => console.log('ERROR', error));\n  }\n\n  registerCanvasInteractions(canvasName) {\n    this.setState(prevState => ({\n      canvasNamesWithInteraction: [...prevState.canvasNamesWithInteraction, canvasName]\n    }));\n  }\n\n  allCanvasHaveContent() {\n    const canvasNamesWithInteraction = this.state.canvasNamesWithInteraction;\n\n    if (canvasNamesWithInteraction.includes('Canvas0') && canvasNamesWithInteraction.includes('Canvas1')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  resetInputLogic() {\n    this.setState(_objectSpread({}, this.initState));\n  }\n\n  getRootStateWhenMyCanvasUnmount() {\n    console.log(this.state);\n  }\n\n  render() {\n    const dimensions = {\n      h: 300,\n      w: 400\n    };\n    const _this$state = this.state,\n          identifyerCanvas = _this$state.identifyerCanvas,\n          isGenerating = _this$state.isGenerating;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, \"ShaVas\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, React.createElement(CanvasBlock, {\n      canvasDimensions: dimensions,\n      constructionCompleted: identifyerCanvas,\n      idNumber: 0,\n      isGenerating: isGenerating,\n      isIdentifyBlock: false,\n      registerCanvasInteractions: this.registerCanvasInteractions,\n      resetInputLogic: this.resetInputLogic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }), React.createElement(CanvasBlock, {\n      canvasDimensions: dimensions,\n      constructionCompleted: identifyerCanvas,\n      idNumber: 1,\n      isGenerating: isGenerating,\n      isIdentifyBlock: false,\n      registerCanvasInteractions: this.registerCanvasInteractions,\n      resetInputLogic: this.resetInputLogic,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"generateButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      disabled: !this.allCanvasHaveContent() || identifyerCanvas || isGenerating,\n      type: \"button\",\n      onClick: this.sendDataToBackend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, this.allCanvasHaveContent() ? isGenerating ? 'Generating samples and Neural Network' : identifyerCanvas ? 'Complete' : 'Generate samples' : 'Please draw your shapes!')), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    })), identifyerCanvas ? React.createElement(\"div\", {\n      id: \"identifyer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(IdentificationCanvas, {\n      _dimensions: dimensions,\n      idNumber: 2,\n      selectClearingMethod: this.clearCanvasOnClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    })) : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }, \"Please draw in both fields identification.\"));\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/jaqqen/ShaVas/frontend/src/components/App.js"],"names":["React","Component","CanvasBlock","IdentificationCanvas","App","constructor","props","initState","canvasNamesWithInteraction","identifyerCanvas","isGenerating","myInterval","state","fetchIfNeuralNetwork","bind","getSample","registerCanvasInteractions","resetInputLogic","sendDataToBackend","getRootStateWhenMyCanvasUnmount","identifyCanvasContent","componentDidMount","fetchClearDatalist","fetch","then","response","ok","json","Error","data","Object","keys","forEach","key","catch","error","console","log","setState","canvas0","document","getElementById","getContext","toDataURL","canvas1","obj","method","headers","body","JSON","stringify","setInterval","samples_created","clearInterval","identificationCanvas","e","canvasName","prevState","allCanvasHaveContent","includes","render","dimensions","h","w","clearCanvasOnClick"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./../static/App.css\";\nimport CanvasBlock from \"./CanvasBlock\";\n// import IdentifcationCanvasBlock from \"./IdentificationBlock\";\nimport IdentificationCanvas from './IdentificationCanvas';\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.initState = {\n      canvasNamesWithInteraction: [],\n      identifyerCanvas: false,\n      isGenerating: false,\n      myInterval: null,\n    };\n    this.state = { ...this.initState }\n    this.fetchIfNeuralNetwork = this.fetchIfNeuralNetwork.bind(this);\n    this.getSample = this.getSample.bind(this);\n    this.registerCanvasInteractions = this.registerCanvasInteractions.bind(this);\n    this.resetInputLogic = this.resetInputLogic.bind(this);\n    this.sendDataToBackend = this.sendDataToBackend.bind(this);\n    this.getRootStateWhenMyCanvasUnmount = this.getRootStateWhenMyCanvasUnmount.bind(this);\n    this.identifyCanvasContent = this.identifyCanvasContent.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchClearDatalist();\n    this.fetchIfNeuralNetwork();\n  }\n\n  // GET - CLEAR LIST VARIABLES IN BACKEND\n  async fetchClearDatalist() {\n    await fetch('/clear_datalist')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        Object.keys(data).forEach(key => {\n          // console.log(key + ' ' + data[key]);\n        });\n      })\n      .catch(error => console.log('Error', error))\n  }\n\n  // GET - FETCH THE NEURAL NETWORK MODEL\n  async fetchIfNeuralNetwork() {\n    await fetch('/if_neural_network')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        // console.log('OK - fetchIfNeuralNetwork', data);\n        if (data === true) {\n          this.setState({\n            identifyerCanvas: false,\n          });\n        }\n      })\n      .catch(error => console.log('Error', error))\n  }\n\n  // POST - DATA TO BACKEND\n  async sendDataToBackend() {\n    const canvas0 = document.getElementById('my-canvas0').getContext('2d')['canvas'].toDataURL('image/png');\n    const canvas1 = document.getElementById('my-canvas1').getContext('2d')['canvas'].toDataURL('image/png');\n\n    this.setState({ isGenerating: true });\n\n    const obj = {\n      'data0': canvas0,\n      'data1': canvas1,\n    };\n\n    await fetch('/send_canvas', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(obj)\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong in /send_canvas...');\n        }\n      })\n      .then(data => {\n        console.log('OK - /send_canvas \\n', data);\n        const myInterval = setInterval(() => {\n          this.getSample();\n        }, 1000)\n        this.setState({\n          myInterval: myInterval\n        });\n      })\n      .catch(error => console.log('ERROR - Catch: /send_canvas ', error));\n\n  }\n\n  // GET - SAMPLE OF THE DATA THAT IS BEING GENERATED\n  async getSample() {\n    await fetch('/getSample')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong in /getSample...');\n        }\n      })\n      .then(data => {\n        if (!data.samples_created) {\n          console.log('OK - FALSE - /getSample: ', data);\n        } else {\n          console.log('OK - TRUE - /getSample: ', data);\n          this.setState({\n            identifyerCanvas: true,\n            isGenerating: false,\n          });\n          clearInterval(this.state.myInterval);\n        }\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  // POST - IDENTIFY THE DRAWING\n  async identifyCanvasContent() {\n    const identificationCanvas = document\n      .getElementById('my-canvas2').getContext('2d')['canvas'].toDataURL('image/png');\n\n    const obj = { 'dataI': identificationCanvas }\n\n    await fetch('/identify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(obj)\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        try {\n          console.log('>> IDENTIFIED - 0-0 ', data[0][0]);\n        } catch (e) {\n          console.log('<< NOT IDENTIFED - 0');\n        }\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  registerCanvasInteractions(canvasName) {\n    this.setState(prevState => ({\n      canvasNamesWithInteraction: [...prevState.canvasNamesWithInteraction, canvasName],\n    }));\n  }\n\n  allCanvasHaveContent() {\n    const { canvasNamesWithInteraction } = this.state;\n    if (canvasNamesWithInteraction.includes('Canvas0') && canvasNamesWithInteraction.includes('Canvas1')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  resetInputLogic() {\n    this.setState({ ...this.initState })\n  }\n\n  getRootStateWhenMyCanvasUnmount() {\n    console.log(this.state);\n  }\n\n  render() {\n    const dimensions = { h: 300, w: 400 };\n\n    const { identifyerCanvas, isGenerating } = this.state;\n\n    return (\n      <div>\n        <h1>ShaVas</h1>\n        <hr />\n        <div>\n          <div className=\"App\">\n            <CanvasBlock\n              canvasDimensions={dimensions}\n              constructionCompleted={identifyerCanvas}\n              idNumber={0}\n              isGenerating={isGenerating}\n              isIdentifyBlock={false}\n              registerCanvasInteractions={this.registerCanvasInteractions}\n              resetInputLogic={this.resetInputLogic}\n\n            />\n            <CanvasBlock\n              canvasDimensions={dimensions}\n              constructionCompleted={identifyerCanvas}\n              idNumber={1}\n              isGenerating={isGenerating}\n              isIdentifyBlock={false}\n              registerCanvasInteractions={this.registerCanvasInteractions}\n              resetInputLogic={this.resetInputLogic}\n            />\n          </div>\n          <div id=\"generateButton\">\n            <button\n              disabled={!this.allCanvasHaveContent() || identifyerCanvas || isGenerating}\n              type='button'\n              onClick={this.sendDataToBackend}>\n              {this.allCanvasHaveContent() ?\n                isGenerating ?\n                  'Generating samples and Neural Network'\n                  :\n                  identifyerCanvas ?\n                    'Complete'\n                    :\n                    'Generate samples'\n                :\n                'Please draw your shapes!'}\n            </button>\n          </div>\n          <hr />\n        </div>\n        {identifyerCanvas ?\n          <div id=\"identifyer-container\">\n            {/* <CanvasBlock\n              canvasDimensions={dimensions}\n              getRootStateWhenMyCanvasUnmount={this.getRootStateWhenMyCanvasUnmount}\n              idNumber={2}\n              isIdentifyBlock={true}\n              identifyCanvasContent={this.identifyCanvasContent}\n            /> */}\n            {/* <IdentifcationCanvasBlock\n              canvasDimensions={dimensions}\n              idNumber={2}\n              identifyCanvasContent={this.identifyCanvasContent}\n            /> */}\n            <IdentificationCanvas\n              _dimensions={dimensions}\n              idNumber={2}\n              selectClearingMethod={this.clearCanvasOnClick}\n            />\n          </div>\n          :\n          <h2>Please draw in both fields identification.</h2>\n        }\n      </div>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}