{"ast":null,"code":"var _jsxFileName = \"/Users/jaqqen/_Bachelor_container/_Testing_container/test_react_flask/shavas/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport \"./../static/App.css\";\nimport CanvasBlock from \"./CanvasBlock\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      setDrawings: [],\n      disableGenerateButton: false\n    };\n    this.appendDrawingToState = this.appendDrawingToState.bind(this);\n    this.generateDataAndNeuronalNetwork = this.generateDataAndNeuronalNetwork.bind(this);\n  }\n\n  appendDrawingToState(canvasDataURL) {\n    this.setState(prevState => ({\n      setDrawings: [...prevState.setDrawings, canvasDataURL]\n    }));\n  }\n\n  componentDidMount() {\n    this.fetchClearDatalist();\n  }\n\n  componentDidUpdate() {\n    console.log('SETDRAWINGS', this.state.setDrawings);\n  }\n\n  async fetchClearDatalist() {\n    const response = await fetch('/clear_datalist');\n    const awaitedRes = await response.json();\n\n    if (response.ok) {\n      console.log('OK', awaitedRes);\n    } else {\n      console.log('ERROR', awaitedRes);\n    }\n  }\n\n  async generateDataAndNeuronalNetwork() {\n    if (!(this.state.setDrawings.length > 1)) {\n      alert('Please set both drawings before generating data!');\n    } else {\n      this.setState({\n        disableGenerateButton: true\n      });\n    } // const obj = { 'data': this.state.setDrawings };\n    // const response = await fetch('/send_canvas', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify(obj)\n    // })\n    // const awaitedRes = await response.json();\n    // if (response.ok && awaitedRes === 'appended') {\n    //   console.log('OK', awaitedRes);\n    // } else {\n    //   console.log('ERROR', awaitedRes)\n    // }\n\n  }\n\n  async identifyCanvasContent() {}\n\n  render() {\n    const _this$state = this.state,\n          disableGenerateButton = _this$state.disableGenerateButton,\n          setDrawings = _this$state.setDrawings;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"ShaVas\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(CanvasBlock, {\n      idNumber: 0,\n      appendDrawingToState: this.appendDrawingToState,\n      identifyer: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(CanvasBlock, {\n      idNumber: 1,\n      appendDrawingToState: this.appendDrawingToState,\n      identifyer: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })), React.createElement(\"button\", {\n      disabled: disableGenerateButton,\n      type: \"button\",\n      onClick: this.generateDataAndNeuronalNetwork,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, disableGenerateButton === false ? setDrawings.length === 2 ? 'Generate data!' : 'Please set drawings!' : 'Generating, calculating...'), React.createElement(\"div\", {\n      id: \"identifyer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, React.createElement(CanvasBlock, {\n      idNumber: 2,\n      identifyer: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    })));\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/jaqqen/_Bachelor_container/_Testing_container/test_react_flask/shavas/src/components/App.js"],"names":["React","Component","CanvasBlock","App","constructor","props","state","setDrawings","disableGenerateButton","appendDrawingToState","bind","generateDataAndNeuronalNetwork","canvasDataURL","setState","prevState","componentDidMount","fetchClearDatalist","componentDidUpdate","console","log","response","fetch","awaitedRes","json","ok","length","alert","identifyCanvasContent","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./../static/App.css\";\nimport CanvasBlock from \"./CanvasBlock\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      setDrawings: [],\n      disableGenerateButton: false\n    };\n    this.appendDrawingToState = this.appendDrawingToState.bind(this);\n\n    this.generateDataAndNeuronalNetwork = this.generateDataAndNeuronalNetwork.bind(this);\n  }\n\n  appendDrawingToState(canvasDataURL) {\n    this.setState(prevState => ({\n      setDrawings: [...prevState.setDrawings, canvasDataURL]\n    }));\n  }\n\n  componentDidMount() {\n    this.fetchClearDatalist();\n  }\n\n  componentDidUpdate() {\n    console.log('SETDRAWINGS', this.state.setDrawings);\n  }\n\n  async fetchClearDatalist() {\n    const response = await fetch('/clear_datalist');\n    const awaitedRes = await response.json();\n    if (response.ok) {\n      console.log('OK', awaitedRes);\n    } else {\n      console.log('ERROR', awaitedRes)\n    }\n  }\n\n  async generateDataAndNeuronalNetwork() {\n    if (!(this.state.setDrawings.length > 1)) {\n      alert('Please set both drawings before generating data!')\n    } else {\n      this.setState({\n        disableGenerateButton: true\n      });\n    }\n\n    // const obj = { 'data': this.state.setDrawings };\n    // const response = await fetch('/send_canvas', {\n    //   method: 'POST',\n    //   headers: {\n    //     'Content-Type': 'application/json',\n    //   },\n    //   body: JSON.stringify(obj)\n    // })\n    // const awaitedRes = await response.json();\n    // if (response.ok && awaitedRes === 'appended') {\n    //   console.log('OK', awaitedRes);\n    // } else {\n    //   console.log('ERROR', awaitedRes)\n    // }\n  }\n\n  async identifyCanvasContent() {\n\n  }\n\n  render() {\n    const { disableGenerateButton, setDrawings } = this.state;\n\n    return (\n      <div>\n        <h1>ShaVas</h1>\n        <hr />\n        <div className=\"App\">\n          <CanvasBlock\n            idNumber={0}\n            appendDrawingToState={this.appendDrawingToState}\n            identifyer={true}\n          />\n          <CanvasBlock\n            idNumber={1}\n            appendDrawingToState={this.appendDrawingToState}\n            identifyer={true}\n          />\n        </div>\n        <button disabled={disableGenerateButton} type='button' onClick={this.generateDataAndNeuronalNetwork}>\n          {disableGenerateButton === false ?\n            setDrawings.length === 2 ? 'Generate data!' : 'Please set drawings!'\n            :\n            'Generating, calculating...'\n          }\n        </button>\n        <div id=\"identifyer-container\">\n          <CanvasBlock idNumber={2} identifyer={true}></CanvasBlock>\n        </div>\n      </div>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}