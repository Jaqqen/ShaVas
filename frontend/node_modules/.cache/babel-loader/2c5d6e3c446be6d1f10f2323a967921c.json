{"ast":null,"code":"var _jsxFileName = \"/Users/jaqqen/ShaVas/frontend/src/components/MyCanvas.js\";\nimport React, { Component } from \"react\";\nexport default class MyCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasHeight: props._dimensions.h,\n      canvasWidth: props._dimensions.w,\n      constructionCompleted: props.constructionCompleted,\n      idNumber: props.idNumber,\n      isGenerating: props.isGenerating,\n      painting: false\n    };\n    this.canvasRef = React.createRef();\n    this.clearCanvas = this.clearCanvas.bind(this);\n    this.mouseDownHandler = this.mouseDownHandler.bind(this);\n    this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\n    this.mouseUpHandler = this.mouseUpHandler.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.constructionCompleted !== state.constructionCompleted) {\n      state.constructionCompleted = props.constructionCompleted;\n      return props.constructionCompleted;\n    } else {\n      return null;\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('nextState', nextState);\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('mouseup', this.mouseUpHandler, false);\n    this.canvasRef.current.removeEventListener('mousedown', this.mouseDownHandler, false);\n    this.canvasRef.current.removeEventListener('mousemove', this.mouseMoveHandler, false);\n\n    if (this.state.idNumber === 2) {\n      this.props.getRootStateWhenMyCanvasUnmount();\n    }\n  }\n\n  componentDidMount() {\n    const props = this.props;\n    const ctx = this.canvasRef.current.getContext(\"2d\"); // #### pre setup for drawing ####\n\n    ctx.lineWidth = 6;\n    ctx.lineCap = \"round\";\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); // #### when mouse is DOWN on CANVAS ####\n\n    this.canvasRef.current.addEventListener(\"mousedown\", e => this.mouseDownHandler(props, e, ctx)); // #### when mouse is UP on WINDOW ####\n\n    window.addEventListener(\"mouseup\", () => this.mouseUpHandler(ctx)); // #### when mouse is MOVING on CANVAS ####\n\n    this.canvasRef.current.addEventListener(\"mousemove\", e => this.mouseMoveHandler(e, ctx)); // #### passing the clearCanvas-function to the parent component ####\n\n    this.props.selectClearingMethod(this.clearCanvas);\n  }\n\n  mouseDownHandler(props, e, ctx) {\n    if (props.registerCanvasInteractions && !this.state.constructionCompleted) {\n      props.registerCanvasInteractions(\"Canvas\" + this.state.idNumber);\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    } else if (props.registerCanvasInteractions && this.state.constructionCompleted) {\n      const redoConstructionConfirm = window.confirm('Do you want to start over?');\n\n      if (redoConstructionConfirm) {\n        props.resetInputLogic();\n        this.setState({\n          constructionCompleted: false\n        });\n      }\n    } else if (props.registerCanvasInteractions === undefined && this.state.constructionCompleted === undefined) {\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    }\n  }\n\n  mouseUpHandler(ctx) {\n    this.setState({\n      painting: false\n    }, () => console.log(this.state.idNumber + ' callback'));\n    ctx.beginPath();\n  }\n\n  mouseMoveHandler(e, ctx) {\n    this.draw(e, ctx);\n  }\n\n  draw(_event, context) {\n    if (!this.state.painting || this.props.isGenerating || this.props.constructionCompleted) return;\n    const rect = this.canvasRef.current.getBoundingClientRect();\n    context.lineTo(_event.clientX - rect.left, _event.clientY - rect.top);\n    context.stroke();\n    context.beginPath();\n    context.moveTo(_event.clientX - rect.left, _event.clientY - rect.top);\n  }\n\n  clearCanvas() {\n    const canvasContext = this.canvasRef.current.getContext(\"2d\");\n    canvasContext.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n    canvasContext.fillStyle = \"white\";\n    canvasContext.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"my-canvas\" + this.state.idNumber,\n      ref: this.canvasRef,\n      height: this.props._dimensions.h,\n      width: this.props._dimensions.w,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jaqqen/ShaVas/frontend/src/components/MyCanvas.js"],"names":["React","Component","MyCanvas","constructor","props","state","canvasHeight","_dimensions","h","canvasWidth","w","constructionCompleted","idNumber","isGenerating","painting","canvasRef","createRef","clearCanvas","bind","mouseDownHandler","mouseMoveHandler","mouseUpHandler","getDerivedStateFromProps","shouldComponentUpdate","nextProps","nextState","console","log","componentWillUnmount","window","removeEventListener","current","getRootStateWhenMyCanvasUnmount","componentDidMount","ctx","getContext","lineWidth","lineCap","fillStyle","fillRect","addEventListener","e","selectClearingMethod","registerCanvasInteractions","setState","draw","redoConstructionConfirm","confirm","resetInputLogic","undefined","beginPath","_event","context","rect","getBoundingClientRect","lineTo","clientX","left","clientY","top","stroke","moveTo","canvasContext","clearRect","render"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\";\nexport default class MyCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasHeight: props._dimensions.h,\n      canvasWidth: props._dimensions.w,\n      constructionCompleted: props.constructionCompleted,\n      idNumber: props.idNumber,\n      isGenerating: props.isGenerating,\n      painting: false,\n    };\n    this.canvasRef = React.createRef();\n    this.clearCanvas = this.clearCanvas.bind(this);\n    this.mouseDownHandler = this.mouseDownHandler.bind(this);\n    this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\n    this.mouseUpHandler = this.mouseUpHandler.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.constructionCompleted !== state.constructionCompleted) {\n      state.constructionCompleted = props.constructionCompleted;\n      return props.constructionCompleted;\n    } else {\n      return null;\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    console.log('nextState', nextState)\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('mouseup', this.mouseUpHandler, false);\n    this.canvasRef.current.removeEventListener('mousedown', this.mouseDownHandler, false);\n    this.canvasRef.current.removeEventListener('mousemove', this.mouseMoveHandler, false);\n\n    if (this.state.idNumber === 2) {\n      this.props.getRootStateWhenMyCanvasUnmount();\n    }\n  }\n\n  componentDidMount() {\n    const props = this.props;\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    // #### pre setup for drawing ####\n    ctx.lineWidth = 6;\n    ctx.lineCap = \"round\";\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n\n    // #### when mouse is DOWN on CANVAS ####\n    this.canvasRef.current.addEventListener(\"mousedown\",\n      e => this.mouseDownHandler(props, e, ctx));\n\n    // #### when mouse is UP on WINDOW ####\n    window.addEventListener(\"mouseup\", () => this.mouseUpHandler(ctx));\n\n    // #### when mouse is MOVING on CANVAS ####\n    this.canvasRef.current.addEventListener(\"mousemove\",\n      e => this.mouseMoveHandler(e, ctx));\n\n    // #### passing the clearCanvas-function to the parent component ####\n    this.props.selectClearingMethod(this.clearCanvas);\n  }\n\n  mouseDownHandler(props, e, ctx) {\n    if ((props.registerCanvasInteractions && !this.state.constructionCompleted)) {\n      props.registerCanvasInteractions(\"Canvas\" + this.state.idNumber);\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    } else if (props.registerCanvasInteractions && this.state.constructionCompleted) {\n      const redoConstructionConfirm = window.confirm('Do you want to start over?');\n      if (redoConstructionConfirm) {\n        props.resetInputLogic();\n        this.setState({\n          constructionCompleted: false,\n        });\n      }\n    } else if ((props.registerCanvasInteractions === undefined && this.state.constructionCompleted === undefined)) {\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    }\n  }\n\n  mouseUpHandler(ctx) {\n    this.setState({\n      painting: false\n    }, () => console.log(this.state.idNumber + ' callback'));\n    ctx.beginPath();\n  }\n\n  mouseMoveHandler(e, ctx) {\n    this.draw(e, ctx);\n  }\n\n  draw(_event, context) {\n    if (!this.state.painting || this.props.isGenerating || this.props.constructionCompleted) return;\n    const rect = this.canvasRef.current.getBoundingClientRect();\n    context.lineTo(_event.clientX - rect.left, _event.clientY - rect.top);\n    context.stroke();\n    context.beginPath();\n    context.moveTo(_event.clientX - rect.left, _event.clientY - rect.top);\n  }\n\n  clearCanvas() {\n    const canvasContext = this.canvasRef.current.getContext(\"2d\");\n    canvasContext.clearRect(\n      0,\n      0,\n      this.state.canvasWidth,\n      this.state.canvasHeight\n    );\n    canvasContext.fillStyle = \"white\";\n    canvasContext.fillRect(\n      0,\n      0,\n      this.state.canvasWidth,\n      this.state.canvasHeight\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <canvas\n          id={\"my-canvas\" + this.state.idNumber}\n          ref={this.canvasRef}\n          height={this.props._dimensions.h}\n          width={this.props._dimensions.w}\n        />\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}