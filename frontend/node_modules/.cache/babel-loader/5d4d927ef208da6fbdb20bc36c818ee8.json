{"ast":null,"code":"var _jsxFileName = \"/Users/jaqqen/ShaVas/frontend/src/components/MyCanvas.js\";\nimport React, { Component } from \"react\";\nexport default class MyCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasHeight: props._dimensions.h,\n      canvasWidth: props._dimensions.w,\n      constructionCompleted: props.constructionCompleted,\n      idNumber: props.idNumber,\n      isGenerating: props.isGenerating,\n      painting: false\n    };\n    this.canvasRef = React.createRef();\n    this.clearCanvas = this.clearCanvas.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.constructionCompleted === true) {\n      state.constructionCompleted = props.constructionCompleted;\n      return props.constructionCompleted;\n    } else {\n      return null;\n    }\n  }\n\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n\n  componentDidMount() {\n    const _this$props = this.props,\n          registerCanvasInteractions = _this$props.registerCanvasInteractions,\n          resetInputLogic = _this$props.resetInputLogic;\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    console.log('>>> DIDMOUNT', this.state.constructionCompleted, ' --- ', this.state.idNumber); // #### pre setup for drawing ####\n\n    ctx.lineWidth = 6;\n    ctx.lineCap = \"round\";\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); // #### when mouse is DOWN on CANVAS ####\n\n    this.canvasRef.current.addEventListener(\"mousedown\", e => {\n      if (registerCanvasInteractions && !this.state.constructionCompleted) {\n        registerCanvasInteractions(\"Canvas\" + this.state.idNumber);\n      } else if (registerCanvasInteractions && this.state.constructionCompleted) {\n        const redoConstructionConfirm = window.confirm('Do you want to start over?');\n\n        if (redoConstructionConfirm) {\n          resetInputLogic();\n        }\n      }\n\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    }); // #### when mouse is UP on WINDOW ####\n\n    window.addEventListener(\"mouseup\", () => {\n      this.setState({\n        painting: false\n      });\n      ctx.beginPath();\n    }); // #### when mouse is MOVING on CANVAS ####\n\n    this.canvasRef.current.addEventListener(\"mousemove\", e => {\n      this.draw(e, ctx);\n    }); // #### passing the clearCanvas-function to the parent component ####\n\n    this.props.selectClearingMethod(this.clearCanvas);\n  }\n\n  draw(_event, context) {\n    if (!this.state.painting || this.props.isGenerating || this.props.constructionCompleted) return;\n    const rect = this.canvasRef.current.getBoundingClientRect();\n    context.lineTo(_event.clientX - rect.left, _event.clientY - rect.top);\n    context.stroke();\n    context.beginPath();\n    context.moveTo(_event.clientX - rect.left, _event.clientY - rect.top);\n  }\n\n  clearCanvas() {\n    const canvasContext = this.canvasRef.current.getContext(\"2d\");\n    canvasContext.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n    canvasContext.fillStyle = \"white\";\n    canvasContext.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n  }\n\n  render() {\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"my-canvas\" + this.state.idNumber,\n      ref: this.canvasRef,\n      height: this.props._dimensions.h,\n      width: this.props._dimensions.w,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jaqqen/ShaVas/frontend/src/components/MyCanvas.js"],"names":["React","Component","MyCanvas","constructor","props","state","canvasHeight","_dimensions","h","canvasWidth","w","constructionCompleted","idNumber","isGenerating","painting","canvasRef","createRef","clearCanvas","bind","getDerivedStateFromProps","componentDidUpdate","console","log","componentDidMount","registerCanvasInteractions","resetInputLogic","ctx","current","getContext","lineWidth","lineCap","fillStyle","fillRect","addEventListener","e","redoConstructionConfirm","window","confirm","setState","draw","beginPath","selectClearingMethod","_event","context","rect","getBoundingClientRect","lineTo","clientX","left","clientY","top","stroke","moveTo","canvasContext","clearRect","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class MyCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasHeight: props._dimensions.h,\n      canvasWidth: props._dimensions.w,\n      constructionCompleted: props.constructionCompleted,\n      idNumber: props.idNumber,\n      isGenerating: props.isGenerating,\n      painting: false,\n    };\n    this.canvasRef = React.createRef();\n    this.clearCanvas = this.clearCanvas.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.constructionCompleted === true) {\n      state.constructionCompleted = props.constructionCompleted;\n      return props.constructionCompleted;\n    } else {\n      return null;\n    }\n  }\n\n  componentDidUpdate() {\n    console.log(this.state);\n  }\n\n  componentDidMount() {\n    const { registerCanvasInteractions, resetInputLogic } = this.props;\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    console.log('>>> DIDMOUNT', this.state.constructionCompleted, ' --- ', this.state.idNumber);\n    // #### pre setup for drawing ####\n    ctx.lineWidth = 6;\n    ctx.lineCap = \"round\";\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n    // #### when mouse is DOWN on CANVAS ####\n    this.canvasRef.current.addEventListener(\"mousedown\", e => {\n      if (registerCanvasInteractions && !this.state.constructionCompleted) {\n        registerCanvasInteractions(\"Canvas\" + this.state.idNumber);\n      } else if (registerCanvasInteractions && this.state.constructionCompleted) {\n        const redoConstructionConfirm = window.confirm('Do you want to start over?');\n        if (redoConstructionConfirm) {\n          resetInputLogic();\n        }\n      }\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    });\n    // #### when mouse is UP on WINDOW ####\n    window.addEventListener(\"mouseup\", () => {\n      this.setState({\n        painting: false\n      });\n      ctx.beginPath();\n    });\n    // #### when mouse is MOVING on CANVAS ####\n    this.canvasRef.current.addEventListener(\"mousemove\", e => {\n      this.draw(e, ctx);\n    });\n\n    // #### passing the clearCanvas-function to the parent component ####\n    this.props.selectClearingMethod(this.clearCanvas);\n\n  }\n\n  draw(_event, context) {\n    if (!this.state.painting || this.props.isGenerating || this.props.constructionCompleted) return;\n    const rect = this.canvasRef.current.getBoundingClientRect();\n    context.lineTo(_event.clientX - rect.left, _event.clientY - rect.top);\n    context.stroke();\n    context.beginPath();\n    context.moveTo(_event.clientX - rect.left, _event.clientY - rect.top);\n  }\n\n  clearCanvas() {\n    const canvasContext = this.canvasRef.current.getContext(\"2d\");\n    canvasContext.clearRect(\n      0,\n      0,\n      this.state.canvasWidth,\n      this.state.canvasHeight\n    );\n    canvasContext.fillStyle = \"white\";\n    canvasContext.fillRect(\n      0,\n      0,\n      this.state.canvasWidth,\n      this.state.canvasHeight\n    );\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <canvas\n          id={\"my-canvas\" + this.state.idNumber}\n          ref={this.canvasRef}\n          height={this.props._dimensions.h}\n          width={this.props._dimensions.w}\n        />\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}