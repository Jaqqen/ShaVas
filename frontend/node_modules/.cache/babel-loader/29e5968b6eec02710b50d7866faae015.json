{"ast":null,"code":"var _jsxFileName = \"/Users/jaqqen/ShaVas/frontend/src/components/MyCanvas.js\";\nimport React, { Component } from \"react\"; // import { shapeIdentification } from \"../shared/constants/IDGlobal\";\n\nexport default class MyCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasHeight: props._dimensions.h,\n      canvasWidth: props._dimensions.w,\n      constructionCompleted: props.constructionCompleted,\n      idNumber: props.idNumber,\n      isGenerating: props.isGenerating,\n      painting: false\n    };\n    this.canvasRef = React.createRef();\n    this.clearCanvas = this.clearCanvas.bind(this);\n    this.mouseDownHandler = this.mouseDownHandler.bind(this);\n    this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\n    this.mouseUpHandler = this.mouseUpHandler.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.constructionCompleted !== state.constructionCompleted) {\n      state.constructionCompleted = props.constructionCompleted;\n      return props.constructionCompleted;\n    } else {\n      return null;\n    }\n  }\n\n  componentWillUnmount() {\n    // window.removeEventListener('mouseup', this.mouseUpHandler, false);\n    // this.canvasRef.current.removeEventListener('mousedown', this.mouseDownHandler, false);\n    // this.canvasRef.current.removeEventListener('mousemove', this.mouseMoveHandler, false);\n    // if (this.props._id === shapeIdentification) {\n    //   this.props.getRootStateWhenMyCanvasUnmount();\n    // }\n    console.log('unmounted MyCanvas');\n  }\n\n  componentDidMount() {\n    const props = this.props;\n    const ctx = this.canvasRef.current.getContext(\"2d\"); // #### pre setup for drawing ####\n\n    ctx.lineWidth = 6;\n    ctx.lineCap = \"round\";\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight); // #### when mouse is DOWN on CANVAS ####\n\n    this.canvasRef.current.addEventListener(\"mousedown\", e => this.mouseDownHandler(props, e, ctx)); // #### when mouse is UP on WINDOW ####\n    // window.addEventListener(\"mouseup\", () => this.mouseUpHandler(ctx));\n\n    window.addEventListener(\"mouseup\", () => this.mouseUpHandler(ctx)); // #### when mouse is MOVING on CANVAS ####\n\n    this.canvasRef.current.addEventListener(\"mousemove\", e => this.mouseMoveHandler(e, ctx)); // #### passing the clearCanvas-function to the parent component ####\n\n    this.props.selectClearingMethod(this.clearCanvas);\n  }\n\n  mouseDownHandler(props, e, ctx) {\n    if (props.registerCanvasInteractions && !this.state.constructionCompleted) {\n      props.registerCanvasInteractions(this.props._id);\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    } else if (props.registerCanvasInteractions && this.state.constructionCompleted) {\n      const redoConstructionConfirm = window.confirm('Do you want to start over?');\n\n      if (redoConstructionConfirm) {\n        props.resetInputCanvasLogic();\n        this.setState({\n          constructionCompleted: false\n        });\n      }\n    } else if (props.registerCanvasInteractions === undefined && this.state.constructionCompleted === undefined) {\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    }\n  }\n\n  mouseUpHandler(ctx) {\n    this.setState({\n      painting: false\n    });\n    ctx.beginPath();\n  }\n\n  mouseMoveHandler(e, ctx) {\n    this.draw(e, ctx);\n  }\n\n  draw(_event, context) {\n    if (!this.state.painting || this.props.isGenerating || this.props.constructionCompleted) return;\n    const rect = this.canvasRef.current.getBoundingClientRect();\n    context.lineTo(_event.clientX - rect.left, _event.clientY - rect.top);\n    context.stroke();\n    context.beginPath();\n    context.moveTo(_event.clientX - rect.left, _event.clientY - rect.top);\n  }\n\n  clearCanvas() {\n    const canvasContext = this.canvasRef.current.getContext(\"2d\");\n    canvasContext.clearRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n    canvasContext.fillStyle = \"white\";\n    canvasContext.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n  }\n\n  render() {\n    const props = this.props;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: props._id,\n      ref: this.canvasRef,\n      height: props._dimensions.h,\n      width: props._dimensions.w,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/Users/jaqqen/ShaVas/frontend/src/components/MyCanvas.js"],"names":["React","Component","MyCanvas","constructor","props","state","canvasHeight","_dimensions","h","canvasWidth","w","constructionCompleted","idNumber","isGenerating","painting","canvasRef","createRef","clearCanvas","bind","mouseDownHandler","mouseMoveHandler","mouseUpHandler","getDerivedStateFromProps","componentWillUnmount","console","log","componentDidMount","ctx","current","getContext","lineWidth","lineCap","fillStyle","fillRect","addEventListener","e","window","selectClearingMethod","registerCanvasInteractions","_id","setState","draw","redoConstructionConfirm","confirm","resetInputCanvasLogic","undefined","beginPath","_event","context","rect","getBoundingClientRect","lineTo","clientX","left","clientY","top","stroke","moveTo","canvasContext","clearRect","render"],"mappings":"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","sourcesContent":["\nimport React, { Component } from \"react\";\n// import { shapeIdentification } from \"../shared/constants/IDGlobal\";\nexport default class MyCanvas extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasHeight: props._dimensions.h,\n      canvasWidth: props._dimensions.w,\n      constructionCompleted: props.constructionCompleted,\n      idNumber: props.idNumber,\n      isGenerating: props.isGenerating,\n      painting: false,\n    };\n    this.canvasRef = React.createRef();\n    this.clearCanvas = this.clearCanvas.bind(this);\n    this.mouseDownHandler = this.mouseDownHandler.bind(this);\n    this.mouseMoveHandler = this.mouseMoveHandler.bind(this);\n    this.mouseUpHandler = this.mouseUpHandler.bind(this);\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.constructionCompleted !== state.constructionCompleted) {\n      state.constructionCompleted = props.constructionCompleted;\n      return props.constructionCompleted;\n    } else {\n      return null;\n    }\n  }\n\n  componentWillUnmount() {\n    // window.removeEventListener('mouseup', this.mouseUpHandler, false);\n    // this.canvasRef.current.removeEventListener('mousedown', this.mouseDownHandler, false);\n    // this.canvasRef.current.removeEventListener('mousemove', this.mouseMoveHandler, false);\n\n    // if (this.props._id === shapeIdentification) {\n    //   this.props.getRootStateWhenMyCanvasUnmount();\n    // }\n    console.log('unmounted MyCanvas');\n  }\n\n  componentDidMount() {\n    const props = this.props;\n    const ctx = this.canvasRef.current.getContext(\"2d\");\n    // #### pre setup for drawing ####\n    ctx.lineWidth = 6;\n    ctx.lineCap = \"round\";\n    ctx.fillStyle = \"white\";\n    ctx.fillRect(0, 0, this.state.canvasWidth, this.state.canvasHeight);\n\n    // #### when mouse is DOWN on CANVAS ####\n    this.canvasRef.current.addEventListener(\"mousedown\",\n      e => this.mouseDownHandler(props, e, ctx));\n\n    // #### when mouse is UP on WINDOW ####\n    // window.addEventListener(\"mouseup\", () => this.mouseUpHandler(ctx));\n    window.addEventListener(\"mouseup\", () => this.mouseUpHandler(ctx));\n\n    // #### when mouse is MOVING on CANVAS ####\n    this.canvasRef.current.addEventListener(\"mousemove\",\n      e => this.mouseMoveHandler(e, ctx));\n\n    // #### passing the clearCanvas-function to the parent component ####\n    this.props.selectClearingMethod(this.clearCanvas);\n  }\n\n  mouseDownHandler(props, e, ctx) {\n    if ((props.registerCanvasInteractions && !this.state.constructionCompleted)) {\n      props.registerCanvasInteractions(this.props._id);\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    } else if (props.registerCanvasInteractions && this.state.constructionCompleted) {\n      const redoConstructionConfirm = window.confirm('Do you want to start over?');\n      if (redoConstructionConfirm) {\n        props.resetInputCanvasLogic();\n        this.setState({\n          constructionCompleted: false,\n        });\n      }\n    } else if ((props.registerCanvasInteractions === undefined && this.state.constructionCompleted === undefined)) {\n      this.setState({\n        painting: true\n      });\n      this.draw(e, ctx);\n    }\n  }\n\n  mouseUpHandler(ctx) {\n    this.setState({\n      painting: false\n    });\n    ctx.beginPath();\n  }\n\n  mouseMoveHandler(e, ctx) {\n    this.draw(e, ctx);\n  }\n\n  draw(_event, context) {\n    if (!this.state.painting || this.props.isGenerating || this.props.constructionCompleted) return;\n    const rect = this.canvasRef.current.getBoundingClientRect();\n    context.lineTo(_event.clientX - rect.left, _event.clientY - rect.top);\n    context.stroke();\n    context.beginPath();\n    context.moveTo(_event.clientX - rect.left, _event.clientY - rect.top);\n  }\n\n  clearCanvas() {\n    const canvasContext = this.canvasRef.current.getContext(\"2d\");\n    canvasContext.clearRect(\n      0,\n      0,\n      this.state.canvasWidth,\n      this.state.canvasHeight\n    );\n    canvasContext.fillStyle = \"white\";\n    canvasContext.fillRect(\n      0,\n      0,\n      this.state.canvasWidth,\n      this.state.canvasHeight\n    );\n  }\n\n  render() {\n    const props = this.props;\n\n    return (\n      <React.Fragment>\n        <canvas\n          id={props._id}\n          ref={this.canvasRef}\n          height={props._dimensions.h}\n          width={props._dimensions.w}\n        />\n      </React.Fragment>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}