{"ast":null,"code":"var _jsxFileName = \"/Users/jaqqen/ShaVas/frontend/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport \"./../static/App.css\";\nimport CanvasBlock from \"./CanvasBlock\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      trainDrawings: [],\n      identifyerDrawing: null,\n      interactionCounter: 0,\n      disableGenerateButton: false,\n      identifyerCanvas: false,\n      myInterval: null\n    };\n    this.appendDrawingToState = this.appendDrawingToState.bind(this);\n    this.countUpInteractionCounter = this.countUpInteractionCounter.bind(this);\n    this.fetchIfNeuralNetwork = this.fetchIfNeuralNetwork.bind(this);\n    this.sendDataToBackend = this.sendDataToBackend.bind(this);\n    this.setIdentifyerDrawing = this.setIdentifyerDrawing.bind(this);\n  }\n\n  appendDrawingToState(canvasDataURL) {\n    this.setState(prevState => ({\n      trainDrawings: [...prevState.trainDrawings, canvasDataURL]\n    }));\n  }\n\n  componentDidMount() {\n    this.fetchClearDatalist();\n    this.fetchIfNeuralNetwork();\n  }\n\n  componentDidUpdate() {\n    console.log('=============');\n    console.log('CURRENT STATE', this.state);\n    console.log('=============');\n  }\n\n  componentWillUnmount() {\n    console.log('App has unmounted');\n  } // GET - CLEAR LIST VARIABLES IN BACKEND\n\n\n  async fetchClearDatalist() {\n    await fetch('/clear_datalist').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      for (let i = 0; i < data.length; i++) {\n        console.log('OK', data[i]);\n      }\n    }).catch(error => console.log('Error', error));\n  } // GET - FETCH THE NEURAL NETWORK MODEL\n\n\n  async fetchIfNeuralNetwork() {\n    await fetch('/if_neural_network').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      console.log('OK - fetchIfNeuralNetwork', data);\n\n      if (data === true) {\n        this.setState({\n          disableGenerateButton: false,\n          identifyerCanvas: false\n        });\n      }\n    }).catch(error => console.log('Error', error));\n  } // TODO: NEEDS TO BE COMBINED WITH GENERATE\n  // POST - DATA TO BACKEND\n\n\n  async sendDataToBackend() {\n    if (!(this.state.trainDrawings.length > 1)) {\n      alert('Please set both drawings before generating data!');\n    }\n\n    const obj = {\n      'data0': this.state.trainDrawings[0],\n      'data1': this.state.trainDrawings[1],\n      'shape0': 'Shape 0',\n      'shape1': 'Shape 1'\n    };\n    await fetch('/send_canvas', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      console.log('OK', data);\n      this.setState({\n        disableGenerateButton: true\n      }); // this.getSample();\n\n      this.generate();\n    }).catch(error => console.log('ERROR', error));\n  } // GET - GENERATE MORE DATA AND RECEIVE CONFIRMATION THAT SAMPLES\n  // HAVE BEEN CREATED\n\n\n  async generate() {\n    await fetch('/generate').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      console.log('OK', data);\n      const myInterval = setInterval(() => {\n        this.getSample();\n      }, 10000);\n      this.setState({\n        myInterval: myInterval\n      });\n    }).catch(error => console.log('ERROR', error));\n  } // GET - SAMPLE OF THE DATA THAT IS BEING GENERATED\n\n\n  async getSample() {\n    await fetch('/getSample').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      if (!data[0].samples_created) {\n        console.log('OK - FALSE: ', data);\n      } else {\n        console.log('OK - TRUE: ', data);\n        this.setState({\n          identifyerCanvas: true\n        });\n        clearInterval(this.state.myInterval);\n      }\n    }).catch(error => console.log('ERROR', error));\n  } // POST - IDENTIFY THE DRAWING\n\n\n  async identifyCanvasContent() {\n    const obj = {\n      'dataI': this.state.identifyerDrawing\n    };\n    await fetch('/identify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      console.log(data);\n      console.log('IDENTIFIED');\n    }).catch(error => console.log('ERROR', error));\n  }\n\n  setIdentifyerDrawing(drawing) {\n    this.setState({\n      identifyerDrawing: drawing\n    }, () => this.identifyCanvasContent());\n  }\n\n  countUpInteractionCounter() {\n    this.setState(prevState => ({\n      interactionCounter: prevState.interactionCounter + 1\n    }));\n  }\n\n  render() {\n    const _this$state = this.state,\n          disableGenerateButton = _this$state.disableGenerateButton,\n          trainDrawings = _this$state.trainDrawings,\n          identifyerCanvas = _this$state.identifyerCanvas;\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, \"ShaVas\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), identifyerCanvas === false ? React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(CanvasBlock, {\n      appendDrawingToState: this.appendDrawingToState,\n      canvasDimensions: {\n        h: 300,\n        w: 400\n      },\n      countUpInteractionCounter: this.countUpInteractionCounter,\n      idNumber: 0,\n      isIdentifyBlock: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }), React.createElement(CanvasBlock, {\n      appendDrawingToState: this.appesndDrawingToState,\n      canvasDimensions: {\n        h: 300,\n        w: 400\n      },\n      idNumber: 1,\n      isIdentifyBlock: false,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"generateButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      disabled: disableGenerateButton,\n      type: \"button\",\n      onClick: this.sendDataToBackend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, disableGenerateButton === false ? trainDrawings.length === 2 ? 'Generate and train data!' : 'Please set drawings!' : identifyerCanvas === false ? 'Generating, calculating...' : 'Computing complete')), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    })) : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), trainDrawings.length > 1 && identifyerCanvas ? React.createElement(\"div\", {\n      id: \"identifyer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    }, React.createElement(CanvasBlock, {\n      setIdentifyerDrawing: this.setIdentifyerDrawing,\n      idNumber: 2,\n      isIdentifyBlock: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    })) : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }, \"Please set both drawings before identification.\"));\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/jaqqen/ShaVas/frontend/src/components/App.js"],"names":["React","Component","CanvasBlock","App","constructor","props","state","trainDrawings","identifyerDrawing","interactionCounter","disableGenerateButton","identifyerCanvas","myInterval","appendDrawingToState","bind","countUpInteractionCounter","fetchIfNeuralNetwork","sendDataToBackend","setIdentifyerDrawing","canvasDataURL","setState","prevState","componentDidMount","fetchClearDatalist","componentDidUpdate","console","log","componentWillUnmount","fetch","then","response","ok","json","Error","data","i","length","catch","error","alert","obj","method","headers","body","JSON","stringify","generate","setInterval","getSample","samples_created","clearInterval","identifyCanvasContent","drawing","render","h","w","appesndDrawingToState"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./../static/App.css\";\nimport CanvasBlock from \"./CanvasBlock\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      trainDrawings: [],\n      identifyerDrawing: null,\n      interactionCounter: 0,\n      disableGenerateButton: false,\n      identifyerCanvas: false,\n      myInterval: null,\n    };\n    this.appendDrawingToState = this.appendDrawingToState.bind(this);\n    this.countUpInteractionCounter = this.countUpInteractionCounter.bind(this);\n    this.fetchIfNeuralNetwork = this.fetchIfNeuralNetwork.bind(this);\n    this.sendDataToBackend = this.sendDataToBackend.bind(this);\n    this.setIdentifyerDrawing = this.setIdentifyerDrawing.bind(this);\n  }\n\n  appendDrawingToState(canvasDataURL) {\n    this.setState(prevState => ({\n      trainDrawings: [...prevState.trainDrawings, canvasDataURL]\n    }));\n  }\n\n  componentDidMount() {\n    this.fetchClearDatalist();\n    this.fetchIfNeuralNetwork();\n  }\n\n  componentDidUpdate() {\n    console.log('=============');\n    console.log('CURRENT STATE', this.state);\n    console.log('=============');\n  }\n\n  componentWillUnmount() {\n    console.log('App has unmounted');\n  }\n\n  // GET - CLEAR LIST VARIABLES IN BACKEND\n  async fetchClearDatalist() {\n    await fetch('/clear_datalist')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        for (let i = 0; i < data.length; i++) {\n          console.log('OK', data[i]);\n        }\n      })\n      .catch(error => console.log('Error', error))\n  }\n\n  // GET - FETCH THE NEURAL NETWORK MODEL\n  async fetchIfNeuralNetwork() {\n    await fetch('/if_neural_network')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        console.log('OK - fetchIfNeuralNetwork', data);\n        if (data === true) {\n          this.setState({\n            disableGenerateButton: false,\n            identifyerCanvas: false,\n          });\n        }\n      })\n      .catch(error => console.log('Error', error))\n  }\n\n  // TODO: NEEDS TO BE COMBINED WITH GENERATE\n  // POST - DATA TO BACKEND\n  async sendDataToBackend() {\n    if (!(this.state.trainDrawings.length > 1)) {\n      alert('Please set both drawings before generating data!')\n    }\n\n    const obj = {\n      'data0': this.state.trainDrawings[0],\n      'data1': this.state.trainDrawings[1],\n      'shape0': 'Shape 0',\n      'shape1': 'Shape 1'\n    };\n\n    await fetch('/send_canvas', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(obj)\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        console.log('OK', data);\n        this.setState({\n          disableGenerateButton: true,\n        });\n        // this.getSample();\n        this.generate();\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  // GET - GENERATE MORE DATA AND RECEIVE CONFIRMATION THAT SAMPLES\n  // HAVE BEEN CREATED\n  async generate() {\n    await fetch('/generate')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        console.log('OK', data);\n        const myInterval = setInterval(() => {\n          this.getSample();\n        }, 10000)\n        this.setState({\n          myInterval: myInterval\n        });\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  // GET - SAMPLE OF THE DATA THAT IS BEING GENERATED\n  async getSample() {\n    await fetch('/getSample')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        if (!data[0].samples_created) {\n          console.log('OK - FALSE: ', data);\n\n        } else {\n          console.log('OK - TRUE: ', data);\n          this.setState({\n            identifyerCanvas: true,\n          });\n          clearInterval(this.state.myInterval);\n        }\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  // POST - IDENTIFY THE DRAWING\n  async identifyCanvasContent() {\n\n    const obj = { 'dataI': this.state.identifyerDrawing }\n\n    await fetch('/identify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(obj)\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        console.log(data);\n        console.log('IDENTIFIED')\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  setIdentifyerDrawing(drawing) {\n    this.setState({\n      identifyerDrawing: drawing,\n    }, () => this.identifyCanvasContent());\n  }\n\n  countUpInteractionCounter() {\n    this.setState(prevState => ({\n      interactionCounter: prevState.interactionCounter + 1,\n    }));\n  }\n\n  render() {\n    const { disableGenerateButton, trainDrawings, identifyerCanvas } = this.state;\n\n    return (\n      <div>\n        <h1>ShaVas</h1>\n        <hr />\n        {identifyerCanvas === false ?\n          <React.Fragment>\n            <div className=\"App\">\n              <CanvasBlock\n                appendDrawingToState={this.appendDrawingToState}\n                canvasDimensions={{ h: 300, w: 400 }}\n                countUpInteractionCounter={this.countUpInteractionCounter}\n                idNumber={0}\n                isIdentifyBlock={false}\n\n              />\n              <CanvasBlock\n                appendDrawingToState={this.appesndDrawingToState}\n                canvasDimensions={{ h: 300, w: 400 }}\n                idNumber={1}\n                isIdentifyBlock={false}\n              />\n            </div>\n            <div id=\"generateButton\">\n              <button disabled={disableGenerateButton} type='button' onClick={this.sendDataToBackend}>\n                {disableGenerateButton === false ?\n                  trainDrawings.length === 2 ? 'Generate and train data!' : 'Please set drawings!'\n                  :\n                  identifyerCanvas === false ? 'Generating, calculating...' : 'Computing complete'\n                }\n              </button>\n            </div>\n            <hr />\n          </React.Fragment>\n          :\n          <React.Fragment></React.Fragment>\n        }\n        {trainDrawings.length > 1 && identifyerCanvas ?\n          <div id=\"identifyer-container\">\n            <CanvasBlock setIdentifyerDrawing={this.setIdentifyerDrawing} idNumber={2} isIdentifyBlock={true}></CanvasBlock>\n          </div>\n          :\n          <h2>Please set both drawings before identification.</h2>\n        }\n      </div>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}