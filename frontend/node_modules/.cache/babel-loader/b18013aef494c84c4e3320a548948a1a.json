{"ast":null,"code":"var _jsxFileName = \"/Users/jaqqen/ShaVas/frontend/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport \"./../static/App.css\";\nimport CanvasBlock from \"./CanvasBlock\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasNamesWithInteraction: [],\n      identifyerCanvas: false,\n      identifyerDrawing: null,\n      interactionCounter: 0,\n      myInterval: null,\n      trainDrawings: []\n    };\n    this.fetchIfNeuralNetwork = this.fetchIfNeuralNetwork.bind(this);\n    this.getSample = this.getSample.bind(this);\n    this.registerCanvasInteractions = this.registerCanvasInteractions.bind(this);\n    this.sendDataToBackend = this.sendDataToBackend.bind(this);\n    this.setIdentifyerDrawing = this.setIdentifyerDrawing.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchClearDatalist();\n    this.fetchIfNeuralNetwork();\n  }\n\n  componentDidUpdate() {// console.log('=============');\n    // console.log('CURRENT STATE --- APP.JS', this.state);\n    // console.log('=============');\n  }\n\n  componentWillUnmount() {\n    console.log('App has unmounted');\n  } // GET - CLEAR LIST VARIABLES IN BACKEND\n\n\n  async fetchClearDatalist() {\n    await fetch('/clear_datalist').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      Object.keys(data).forEach(key => {\n        console.log(key + ' ' + data[key]);\n      });\n    }).catch(error => console.log('Error', error));\n  } // GET - FETCH THE NEURAL NETWORK MODEL\n\n\n  async fetchIfNeuralNetwork() {\n    await fetch('/if_neural_network').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      console.log('OK - fetchIfNeuralNetwork', data);\n\n      if (data === true) {\n        this.setState({\n          identifyerCanvas: false\n        });\n      }\n    }).catch(error => console.log('Error', error));\n  } // POST - DATA TO BACKEND\n\n\n  async sendDataToBackend() {\n    const canvas0 = document.getElementById('my-canvas0').getContext('2d')['canvas'].toDataURL('image/png');\n    const canvas1 = document.getElementById('my-canvas1').getContext('2d')['canvas'].toDataURL('image/png');\n    const obj = {\n      'data0': canvas0,\n      'data1': canvas1,\n      'shape0': 'Shape 0',\n      'shape1': 'Shape 1'\n    };\n    await fetch('/send_canvas', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong in /send_canvas...');\n      }\n    }).then(data => {\n      console.log('OK - /send_canvas \\n', data);\n      const myInterval = setInterval(() => {\n        this.getSample();\n      }, 10000);\n      this.setState({\n        myInterval: myInterval\n      });\n    }).catch(error => console.log('ERROR - Catch: /send_canvas ', error));\n  } // GET - GENERATE MORE DATA AND RECEIVE CONFIRMATION THAT SAMPLES\n  // HAVE BEEN CREATED\n  // async generate() {\n  //   await fetch('/generate')\n  //     .then(response => {\n  //       if (response.ok) {\n  //         return response.json();\n  //       } else {\n  //         throw new Error('Something went wrong ...');\n  //       }\n  //     })\n  //     .then(data => {\n  //       console.log('OK', data);\n  //       const myInterval = setInterval(() => {\n  //         this.getSample();\n  //       }, 10000)\n  //       this.setState({\n  //         myInterval: myInterval\n  //       });\n  //     })\n  //     .catch(error => console.log('ERROR', error))\n  // }\n  // GET - SAMPLE OF THE DATA THAT IS BEING GENERATED\n\n\n  async getSample() {\n    await fetch('/getSample').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      if (!data[0].samples_created) {\n        console.log('OK - FALSE: ', data);\n      } else {\n        console.log('OK - TRUE: ', data);\n        this.setState({\n          identifyerCanvas: true\n        });\n        clearInterval(this.state.myInterval);\n      }\n    }).catch(error => console.log('ERROR', error));\n  } // POST - IDENTIFY THE DRAWING\n\n\n  async identifyCanvasContent() {\n    const obj = {\n      'dataI': this.state.identifyerDrawing\n    };\n    await fetch('/identify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      console.log(data);\n      console.log('IDENTIFIED');\n    }).catch(error => console.log('ERROR', error));\n  }\n\n  setIdentifyerDrawing(drawing) {\n    this.setState({\n      identifyerDrawing: drawing\n    }, () => this.identifyCanvasContent());\n  }\n\n  registerCanvasInteractions(canvasName) {\n    this.setState(prevState => ({\n      canvasNamesWithInteraction: [...prevState.canvasNamesWithInteraction, canvasName]\n    }));\n  }\n\n  allCanvasHaveContent() {\n    const canvasNamesWithInteraction = this.state.canvasNamesWithInteraction;\n\n    if (canvasNamesWithInteraction.includes('Canvas0') && canvasNamesWithInteraction.includes('Canvas1')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          trainDrawings = _this$state.trainDrawings,\n          identifyerCanvas = _this$state.identifyerCanvas;\n    const dimensions = {\n      h: 300,\n      w: 400\n    };\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }, \"ShaVas\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }, React.createElement(CanvasBlock, {\n      canvasDimensions: dimensions,\n      idNumber: 0,\n      isIdentifyBlock: false,\n      registerCanvasInteractions: this.registerCanvasInteractions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221\n      },\n      __self: this\n    }), React.createElement(CanvasBlock, {\n      canvasDimensions: dimensions,\n      idNumber: 1,\n      isIdentifyBlock: false,\n      registerCanvasInteractions: this.registerCanvasInteractions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"generateButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      disabled: !this.allCanvasHaveContent(),\n      type: \"button\",\n      onClick: this.sendDataToBackend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, this.allCanvasHaveContent() ? 'Generate samples' : 'Please draw your shapes!')), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    })), trainDrawings.length > 1 && identifyerCanvas ? React.createElement(\"div\", {\n      id: \"identifyer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(CanvasBlock, {\n      setIdentifyerDrawing: this.setIdentifyerDrawing,\n      idNumber: 2,\n      isIdentifyBlock: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    })) : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, \"Please draw in both fields identification.\"));\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/jaqqen/ShaVas/frontend/src/components/App.js"],"names":["React","Component","CanvasBlock","App","constructor","props","state","canvasNamesWithInteraction","identifyerCanvas","identifyerDrawing","interactionCounter","myInterval","trainDrawings","fetchIfNeuralNetwork","bind","getSample","registerCanvasInteractions","sendDataToBackend","setIdentifyerDrawing","componentDidMount","fetchClearDatalist","componentDidUpdate","componentWillUnmount","console","log","fetch","then","response","ok","json","Error","data","Object","keys","forEach","key","catch","error","setState","canvas0","document","getElementById","getContext","toDataURL","canvas1","obj","method","headers","body","JSON","stringify","setInterval","samples_created","clearInterval","identifyCanvasContent","drawing","canvasName","prevState","allCanvasHaveContent","includes","render","dimensions","h","w","length"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./../static/App.css\";\nimport CanvasBlock from \"./CanvasBlock\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasNamesWithInteraction: [],\n      identifyerCanvas: false,\n      identifyerDrawing: null,\n      interactionCounter: 0,\n      myInterval: null,\n      trainDrawings: [],\n    };\n    this.fetchIfNeuralNetwork = this.fetchIfNeuralNetwork.bind(this);\n    this.getSample = this.getSample.bind(this);\n    this.registerCanvasInteractions = this.registerCanvasInteractions.bind(this);\n    this.sendDataToBackend = this.sendDataToBackend.bind(this);\n    this.setIdentifyerDrawing = this.setIdentifyerDrawing.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchClearDatalist();\n    this.fetchIfNeuralNetwork();\n  }\n\n  componentDidUpdate() {\n    // console.log('=============');\n    // console.log('CURRENT STATE --- APP.JS', this.state);\n    // console.log('=============');\n  }\n\n  componentWillUnmount() {\n    console.log('App has unmounted');\n  }\n\n  // GET - CLEAR LIST VARIABLES IN BACKEND\n  async fetchClearDatalist() {\n    await fetch('/clear_datalist')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        Object.keys(data).forEach(key => {\n          console.log(key + ' ' + data[key]);\n        });\n      })\n      .catch(error => console.log('Error', error))\n  }\n\n  // GET - FETCH THE NEURAL NETWORK MODEL\n  async fetchIfNeuralNetwork() {\n    await fetch('/if_neural_network')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        console.log('OK - fetchIfNeuralNetwork', data);\n        if (data === true) {\n          this.setState({\n            identifyerCanvas: false,\n          });\n        }\n      })\n      .catch(error => console.log('Error', error))\n  }\n\n  // POST - DATA TO BACKEND\n  async sendDataToBackend() {\n    const canvas0 = document.getElementById('my-canvas0').getContext('2d')['canvas'].toDataURL('image/png');\n    const canvas1 = document.getElementById('my-canvas1').getContext('2d')['canvas'].toDataURL('image/png');\n\n    const obj = {\n      'data0': canvas0,\n      'data1': canvas1,\n      'shape0': 'Shape 0',\n      'shape1': 'Shape 1'\n    };\n\n    await fetch('/send_canvas', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(obj)\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong in /send_canvas...');\n        }\n      })\n      .then(data => {\n        console.log('OK - /send_canvas \\n', data);\n        const myInterval = setInterval(() => {\n          this.getSample();\n        }, 10000)\n        this.setState({\n          myInterval: myInterval\n        });\n      })\n      .catch(error => console.log('ERROR - Catch: /send_canvas ', error));\n\n  }\n\n  // GET - GENERATE MORE DATA AND RECEIVE CONFIRMATION THAT SAMPLES\n  // HAVE BEEN CREATED\n  // async generate() {\n  //   await fetch('/generate')\n  //     .then(response => {\n  //       if (response.ok) {\n  //         return response.json();\n  //       } else {\n  //         throw new Error('Something went wrong ...');\n  //       }\n  //     })\n  //     .then(data => {\n  //       console.log('OK', data);\n  //       const myInterval = setInterval(() => {\n  //         this.getSample();\n  //       }, 10000)\n  //       this.setState({\n  //         myInterval: myInterval\n  //       });\n  //     })\n  //     .catch(error => console.log('ERROR', error))\n  // }\n\n  // GET - SAMPLE OF THE DATA THAT IS BEING GENERATED\n  async getSample() {\n    await fetch('/getSample')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        if (!data[0].samples_created) {\n          console.log('OK - FALSE: ', data);\n\n        } else {\n          console.log('OK - TRUE: ', data);\n          this.setState({\n            identifyerCanvas: true,\n          });\n          clearInterval(this.state.myInterval);\n        }\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  // POST - IDENTIFY THE DRAWING\n  async identifyCanvasContent() {\n\n    const obj = { 'dataI': this.state.identifyerDrawing }\n\n    await fetch('/identify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(obj)\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        console.log(data);\n        console.log('IDENTIFIED')\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  setIdentifyerDrawing(drawing) {\n    this.setState({\n      identifyerDrawing: drawing,\n    }, () => this.identifyCanvasContent());\n  }\n\n  registerCanvasInteractions(canvasName) {\n    this.setState(prevState => ({\n      canvasNamesWithInteraction: [...prevState.canvasNamesWithInteraction, canvasName],\n    }));\n  }\n\n  allCanvasHaveContent() {\n    const { canvasNamesWithInteraction } = this.state;\n    if (canvasNamesWithInteraction.includes('Canvas0') && canvasNamesWithInteraction.includes('Canvas1')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    const { trainDrawings, identifyerCanvas } = this.state;\n    const dimensions = { h: 300, w: 400 };\n\n    return (\n      <div>\n        <h1>ShaVas</h1>\n        <hr />\n        <div>\n          <div className=\"App\">\n            <CanvasBlock\n              canvasDimensions={dimensions}\n              idNumber={0}\n              isIdentifyBlock={false}\n              registerCanvasInteractions={this.registerCanvasInteractions}\n\n            />\n            <CanvasBlock\n              canvasDimensions={dimensions}\n              idNumber={1}\n              isIdentifyBlock={false}\n              registerCanvasInteractions={this.registerCanvasInteractions}\n            />\n          </div>\n          <div id=\"generateButton\">\n            <button disabled={!this.allCanvasHaveContent()} type='button' onClick={this.sendDataToBackend}>\n              {this.allCanvasHaveContent() ? 'Generate samples' : 'Please draw your shapes!'}\n            </button>\n          </div>\n          <hr />\n        </div>\n        {trainDrawings.length > 1 && identifyerCanvas ?\n          <div id=\"identifyer-container\">\n            <CanvasBlock setIdentifyerDrawing={this.setIdentifyerDrawing} idNumber={2} isIdentifyBlock={true}></CanvasBlock>\n          </div>\n          :\n          <h2>Please draw in both fields identification.</h2>\n        }\n      </div>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}