{"ast":null,"code":"var _jsxFileName = \"/Users/jaqqen/ShaVas/frontend/src/components/App.js\";\nimport React, { Component } from \"react\";\nimport \"./../static/App.css\";\nimport CanvasBlock from \"./CanvasBlock\";\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasNamesWithInteraction: [],\n      disableGenerateButton: false,\n      identifyerCanvas: false,\n      identifyerDrawing: null,\n      interactionCounter: 0,\n      myInterval: null,\n      trainDrawings: []\n    };\n    this.appendDrawingToState = this.appendDrawingToState.bind(this);\n    this.fetchIfNeuralNetwork = this.fetchIfNeuralNetwork.bind(this);\n    this.sendDataToBackend = this.sendDataToBackend.bind(this);\n    this.registerCanvasInteractions = this.registerCanvasInteractions.bind(this);\n    this.setIdentifyerDrawing = this.setIdentifyerDrawing.bind(this);\n  }\n\n  appendDrawingToState(canvasDataURL) {\n    this.setState(prevState => ({\n      trainDrawings: [...prevState.trainDrawings, canvasDataURL]\n    }));\n  }\n\n  componentDidMount() {\n    this.fetchClearDatalist();\n    this.fetchIfNeuralNetwork();\n  }\n\n  componentDidUpdate() {\n    console.log('=============');\n    console.log('CURRENT STATE', this.state);\n    console.log(this.allCanvasHaveContent());\n    console.log('=============');\n  }\n\n  componentWillUnmount() {\n    console.log('App has unmounted');\n  } // GET - CLEAR LIST VARIABLES IN BACKEND\n\n\n  async fetchClearDatalist() {\n    await fetch('/clear_datalist').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      for (let i = 0; i < data.length; i++) {\n        console.log('OK', data[i]);\n      }\n    }).catch(error => console.log('Error', error));\n  } // GET - FETCH THE NEURAL NETWORK MODEL\n\n\n  async fetchIfNeuralNetwork() {\n    await fetch('/if_neural_network').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      console.log('OK - fetchIfNeuralNetwork', data);\n\n      if (data === true) {\n        this.setState({\n          disableGenerateButton: false,\n          identifyerCanvas: false\n        });\n      }\n    }).catch(error => console.log('Error', error));\n  } // TODO: NEEDS TO BE COMBINED WITH GENERATE\n  // POST - DATA TO BACKEND\n\n\n  async sendDataToBackend() {\n    if (!(this.state.trainDrawings.length > 1)) {\n      alert('Please set both drawings before generating data!');\n    }\n\n    const obj = {\n      'data0': this.state.trainDrawings[0],\n      'data1': this.state.trainDrawings[1],\n      'shape0': 'Shape 0',\n      'shape1': 'Shape 1'\n    };\n    await fetch('/send_canvas', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      console.log('OK', data);\n      this.setState({\n        disableGenerateButton: true\n      }); // this.getSample();\n\n      this.generate();\n    }).catch(error => console.log('ERROR', error));\n  } // GET - GENERATE MORE DATA AND RECEIVE CONFIRMATION THAT SAMPLES\n  // HAVE BEEN CREATED\n\n\n  async generate() {\n    await fetch('/generate').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      console.log('OK', data);\n      const myInterval = setInterval(() => {\n        this.getSample();\n      }, 10000);\n      this.setState({\n        myInterval: myInterval\n      });\n    }).catch(error => console.log('ERROR', error));\n  } // GET - SAMPLE OF THE DATA THAT IS BEING GENERATED\n\n\n  async getSample() {\n    await fetch('/getSample').then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      if (!data[0].samples_created) {\n        console.log('OK - FALSE: ', data);\n      } else {\n        console.log('OK - TRUE: ', data);\n        this.setState({\n          identifyerCanvas: true\n        });\n        clearInterval(this.state.myInterval);\n      }\n    }).catch(error => console.log('ERROR', error));\n  } // POST - IDENTIFY THE DRAWING\n\n\n  async identifyCanvasContent() {\n    const obj = {\n      'dataI': this.state.identifyerDrawing\n    };\n    await fetch('/identify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(obj)\n    }).then(response => {\n      if (response.ok) {\n        return response.json();\n      } else {\n        throw new Error('Something went wrong ...');\n      }\n    }).then(data => {\n      console.log(data);\n      console.log('IDENTIFIED');\n    }).catch(error => console.log('ERROR', error));\n  }\n\n  setIdentifyerDrawing(drawing) {\n    this.setState({\n      identifyerDrawing: drawing\n    }, () => this.identifyCanvasContent());\n  }\n\n  registerCanvasInteractions(canvasName) {\n    this.setState(prevState => ({\n      canvasNamesWithInteraction: [...prevState.canvasNamesWithInteraction, canvasName]\n    }));\n  }\n\n  allCanvasHaveContent() {\n    const canvasNamesWithInteraction = this.state.canvasNamesWithInteraction;\n\n    if (canvasNamesWithInteraction.includes('Canvas0') && canvasNamesWithInteraction.includes('Canvas1')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          disableGenerateButton = _this$state.disableGenerateButton,\n          trainDrawings = _this$state.trainDrawings,\n          identifyerCanvas = _this$state.identifyerCanvas;\n    const allCanvasContentTrigger = this.allCanvasHaveContent();\n    console.log(allCanvasContentTrigger);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, \"ShaVas\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), identifyerCanvas === false ? React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230\n      },\n      __self: this\n    }, React.createElement(CanvasBlock, {\n      appendDrawingToState: this.appendDrawingToState,\n      canvasDimensions: {\n        h: 300,\n        w: 400\n      },\n      idNumber: 0,\n      isIdentifyBlock: false,\n      registerCanvasInteractions: this.registerCanvasInteractions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), React.createElement(CanvasBlock, {\n      appendDrawingToState: this.appesndDrawingToState,\n      canvasDimensions: {\n        h: 300,\n        w: 400\n      },\n      idNumber: 1,\n      isIdentifyBlock: false,\n      registerCanvasInteractions: this.registerCanvasInteractions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      id: \"generateButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 247\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      disabled: !allCanvasContentTrigger,\n      type: \"button\",\n      onClick: this.sendDataToBackend,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, !allCanvasContentTrigger ? 'Please draw your shapes!' : 'Generate samples')), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    })) : React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }), trainDrawings.length > 1 && identifyerCanvas ? React.createElement(\"div\", {\n      id: \"identifyer-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(CanvasBlock, {\n      setIdentifyerDrawing: this.setIdentifyerDrawing,\n      idNumber: 2,\n      isIdentifyBlock: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    })) : React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"Please set both drawings before identification.\"));\n  }\n\n}\n;","map":{"version":3,"sources":["/Users/jaqqen/ShaVas/frontend/src/components/App.js"],"names":["React","Component","CanvasBlock","App","constructor","props","state","canvasNamesWithInteraction","disableGenerateButton","identifyerCanvas","identifyerDrawing","interactionCounter","myInterval","trainDrawings","appendDrawingToState","bind","fetchIfNeuralNetwork","sendDataToBackend","registerCanvasInteractions","setIdentifyerDrawing","canvasDataURL","setState","prevState","componentDidMount","fetchClearDatalist","componentDidUpdate","console","log","allCanvasHaveContent","componentWillUnmount","fetch","then","response","ok","json","Error","data","i","length","catch","error","alert","obj","method","headers","body","JSON","stringify","generate","setInterval","getSample","samples_created","clearInterval","identifyCanvasContent","drawing","canvasName","includes","render","allCanvasContentTrigger","h","w","appesndDrawingToState"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./../static/App.css\";\nimport CanvasBlock from \"./CanvasBlock\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      canvasNamesWithInteraction: [],\n      disableGenerateButton: false,\n      identifyerCanvas: false,\n      identifyerDrawing: null,\n      interactionCounter: 0,\n      myInterval: null,\n      trainDrawings: [],\n    };\n    this.appendDrawingToState = this.appendDrawingToState.bind(this);\n    this.fetchIfNeuralNetwork = this.fetchIfNeuralNetwork.bind(this);\n    this.sendDataToBackend = this.sendDataToBackend.bind(this);\n    this.registerCanvasInteractions = this.registerCanvasInteractions.bind(this);\n    this.setIdentifyerDrawing = this.setIdentifyerDrawing.bind(this);\n  }\n\n  appendDrawingToState(canvasDataURL) {\n    this.setState(prevState => ({\n      trainDrawings: [...prevState.trainDrawings, canvasDataURL]\n    }));\n  }\n\n  componentDidMount() {\n    this.fetchClearDatalist();\n    this.fetchIfNeuralNetwork();\n  }\n\n  componentDidUpdate() {\n    console.log('=============');\n    console.log('CURRENT STATE', this.state);\n    console.log(this.allCanvasHaveContent());\n    console.log('=============');\n  }\n\n  componentWillUnmount() {\n    console.log('App has unmounted');\n  }\n\n  // GET - CLEAR LIST VARIABLES IN BACKEND\n  async fetchClearDatalist() {\n    await fetch('/clear_datalist')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        for (let i = 0; i < data.length; i++) {\n          console.log('OK', data[i]);\n        }\n      })\n      .catch(error => console.log('Error', error))\n  }\n\n  // GET - FETCH THE NEURAL NETWORK MODEL\n  async fetchIfNeuralNetwork() {\n    await fetch('/if_neural_network')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        console.log('OK - fetchIfNeuralNetwork', data);\n        if (data === true) {\n          this.setState({\n            disableGenerateButton: false,\n            identifyerCanvas: false,\n          });\n        }\n      })\n      .catch(error => console.log('Error', error))\n  }\n\n  // TODO: NEEDS TO BE COMBINED WITH GENERATE\n  // POST - DATA TO BACKEND\n  async sendDataToBackend() {\n    if (!(this.state.trainDrawings.length > 1)) {\n      alert('Please set both drawings before generating data!')\n    }\n\n    const obj = {\n      'data0': this.state.trainDrawings[0],\n      'data1': this.state.trainDrawings[1],\n      'shape0': 'Shape 0',\n      'shape1': 'Shape 1'\n    };\n\n    await fetch('/send_canvas', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(obj)\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        console.log('OK', data);\n        this.setState({\n          disableGenerateButton: true,\n        });\n        // this.getSample();\n        this.generate();\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  // GET - GENERATE MORE DATA AND RECEIVE CONFIRMATION THAT SAMPLES\n  // HAVE BEEN CREATED\n  async generate() {\n    await fetch('/generate')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        console.log('OK', data);\n        const myInterval = setInterval(() => {\n          this.getSample();\n        }, 10000)\n        this.setState({\n          myInterval: myInterval\n        });\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  // GET - SAMPLE OF THE DATA THAT IS BEING GENERATED\n  async getSample() {\n    await fetch('/getSample')\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        if (!data[0].samples_created) {\n          console.log('OK - FALSE: ', data);\n\n        } else {\n          console.log('OK - TRUE: ', data);\n          this.setState({\n            identifyerCanvas: true,\n          });\n          clearInterval(this.state.myInterval);\n        }\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  // POST - IDENTIFY THE DRAWING\n  async identifyCanvasContent() {\n\n    const obj = { 'dataI': this.state.identifyerDrawing }\n\n    await fetch('/identify', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(obj)\n    })\n      .then(response => {\n        if (response.ok) {\n          return response.json();\n        } else {\n          throw new Error('Something went wrong ...');\n        }\n      })\n      .then(data => {\n        console.log(data);\n        console.log('IDENTIFIED')\n      })\n      .catch(error => console.log('ERROR', error))\n  }\n\n  setIdentifyerDrawing(drawing) {\n    this.setState({\n      identifyerDrawing: drawing,\n    }, () => this.identifyCanvasContent());\n  }\n\n  registerCanvasInteractions(canvasName) {\n    this.setState(prevState => ({\n      canvasNamesWithInteraction: [...prevState.canvasNamesWithInteraction, canvasName],\n    }));\n  }\n\n  allCanvasHaveContent() {\n    const { canvasNamesWithInteraction } = this.state;\n    if (canvasNamesWithInteraction.includes('Canvas0') && canvasNamesWithInteraction.includes('Canvas1')) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  render() {\n    const { disableGenerateButton, trainDrawings, identifyerCanvas } = this.state;\n    const allCanvasContentTrigger = this.allCanvasHaveContent();\n    console.log(allCanvasContentTrigger);\n    return (\n      <div>\n        <h1>ShaVas</h1>\n        <hr />\n        {identifyerCanvas === false ?\n          <React.Fragment>\n            <div className=\"App\">\n              <CanvasBlock\n                appendDrawingToState={this.appendDrawingToState}\n                canvasDimensions={{ h: 300, w: 400 }}\n                idNumber={0}\n                isIdentifyBlock={false}\n                registerCanvasInteractions={this.registerCanvasInteractions}\n\n              />\n              <CanvasBlock\n                appendDrawingToState={this.appesndDrawingToState}\n                canvasDimensions={{ h: 300, w: 400 }}\n                idNumber={1}\n                isIdentifyBlock={false}\n                registerCanvasInteractions={this.registerCanvasInteractions}\n              />\n            </div>\n            <div id=\"generateButton\">\n              <button disabled={!allCanvasContentTrigger} type='button' onClick={this.sendDataToBackend}>\n                {!allCanvasContentTrigger ?\n                  'Please draw your shapes!'\n                  :\n                  'Generate samples'\n                }\n              </button>\n            </div>\n            <hr />\n          </React.Fragment>\n          :\n          <React.Fragment></React.Fragment>\n        }\n        {trainDrawings.length > 1 && identifyerCanvas ?\n          <div id=\"identifyer-container\">\n            <CanvasBlock setIdentifyerDrawing={this.setIdentifyerDrawing} idNumber={2} isIdentifyBlock={true}></CanvasBlock>\n          </div>\n          :\n          <h2>Please set both drawings before identification.</h2>\n        }\n      </div>\n    );\n  }\n};\n"]},"metadata":{},"sourceType":"module"}